.Dd August 04, 2024
.Dt CODALIST "" "Coda-C"
.Os Multiplatform
.Sh NAME
.Nm codalist
.Nd property list utility (Version 1.2)
.Sh SYNOPSIS
.Nm
.Op option/file ...
.Sh DESCRIPTION
.Nm
can be used to slice and dice plist files.
Each argument is a command, executed in order until all are executed or a FATAL error occurs.
.sp
.Nm
without any arguments will display the default help (-h).
.Bl -tag -width "helpxx"
.It Fl h
Show usage information.
.It Fl he
Show encoding flags.
.It Fl ho
Show objects types.
.It Fl c
Show Copyright (c) information.
.El
.Pp
The program works on a single plist and keeps track of a \fIPLIST\fR, \fIFILENAME\fR, \fIFORMAT\fR,
and will default to printing the plist, in terse format, if it was not written to a file.
Upon startup the \fIFILENAME\fR is "new.clist",
the \fIFORMAT\fR is Coda-C-XML, and the \fIPLIST\fR is an empty Dictionary.
.Pp
.Ar file
\0\0\0Load the specified file, setting: \fIPLIST\fR, \fIFILENAME\fR, and \fIFORMAT\fR.
Use "-" for <stdin>.
.Pp
When the program finishes runing the arguments, a version of the \fIPLIST\fR may be printed.
.Bl -tag -width "helpxx"
.It Fl d
No display at end of arguments.
.It Fl dn
Display at end of arguments (terse).
.It Fl dw
Display at end of arguments, if not written (terse).
.It Fl da
Display Apple XML at end of arguments (-xhead).
.It Fl dc
Display Coda-C XML at end of arguments (-xhead).
.It Fl dj
Display JSON at end of arguments (-pretty,-noes).
.El
.Pp
Note: A PList composed of a single data leaf will write raw data.
To change the output encoding part of \fIFORMAT\fR use the following:
.Bl -tag -width "helpxx"
.It Fl ec
Serialize to Coda-C XML format.
.It Fl ea
Serialize to Apple XML format.
.It Fl eb
Serialize to Apple Binary format.
.It Fl ej
Serialize to JSON format.
.El
.Pp
For the following options "-" sets the flag and "+" clears it.
To change the encoding details part of \fIFORMAT\fR use the following:
.Bl -tag -width "helpxxXXX"
.It Fl pretty
Add spaces and new lines to JSON. (+pretty)
.It Fl xhead
Do not Output XML Headers. (+xhead)
.It Fl xml1
Add new lines for leafs in XML. (+xml1)
.It Fl unsorted
Unsorted Dictionary keys. (+unsorted)
.It Fl noes
Do not escape slashes in JSON. (+noes)
.It Fl strict
No JSON conversions for <uid>, <date>, & <data>. (+strict, input/output)
.El
.Pp
Use the following to write files:
.Bl -tag -width "helpxxXXX"
.It Fl w
Write the current \fIFILENAME\fR in the current \fIFORMAT\fR.
.It Fl w:-
Write to <stdout>.
.It Fl w:\fIAFILE\fR
Write to a specified file.
.It Fl f:\fIAFILE\fR
Set the \fIFILENAME\fR to "AFILE".
.El
.Pp
Other miscellaneous flags are:
.Bl -tag -width "helpxxXXX"
.It Fl v
Verbose(on): display processing messages. (+v)
.It Fl n
Output a newline. (useful when displaying JSON)
.It Fl i
Display information: \fIFILENAME\fR, <top object type>, & raw mode.
.It Fl t
Test plist for Coda-C XML, Apple XML, Binary, & JSON formats.
Check compatibility with "-strict -t".
.It Fl q
Quit processing arguments. (useful for testing)
.El
.Pp
The following two commands are used to alter the contents of a plist:
.Pp
	\fB-\fR/\fIKEYPATH\fR
Remove the selected component of \fIPLIST\fR.
.Pp
	\fB+\fR/\fIKEYPATH\fR=\fIObject\fR
Add or replace the selected component with \fIObject\fR.
.Pp
A \fIKEYPATH\fR looks like a file-path but the names refer to dictionary keys or array indexes (using "+" to add to an array.  Example: "/key1/0", "/list/+" etc.
.Pp
The current list of \fIObjects\fR follows:
.Pp
.nf
	\fBdict\fR
	\fBarray\fR
	\fBtrue\fR
	\fBfalse\fR
	\fBnull\fR  (arrays allow nulls, but not for all formats)
	\fBjsonnull\fR  (placeholder for dictionary JSON null)
	\fBstring:\fR\fIGreen_Tea\fR
	\fBint:\fR\fI12345\fR  (or integer:)
	\fBuid:\fR\fI12345\fR  (CF$UID)
	\fBdate:\fR\fI1971-12-31T23:23:59Z\fR
	\fBreal:\fR\fI12.345\fR
	\fBdata:\fR\fIBASE64.DATA.AAAA\fR
	\fBdatafile:\fR\fIMyfile.bin\fR  (contents of file as Data)
	\fB./\fRFILE\fI[:KEYPATH]\fR  (component of plist file)
	\fB/\fRFILE\fI[:KEYPATH]\fR
	\fB:KEYPATH\fR  (in current plist)
	\fBJSON\fR  (a valid JSON5 string)
.fi
.Pp
.Sh EXAMPLES
	codalist -c # copyright info
.sp
	codalist FILE -strict -t # test output format compatibility
.sp
	codalist FILE -eb -w # convert FILE to Binary format
.sp 0
	codalist FILE -ej -w # convert FILE to JSON format
.sp 0
	codalist FILE -ea -w # convert FILE to Apple XML format
.sp
The program start up with an empty <dict> and a file name of "new.clist". You can build a plist with commands.
.sp
	codalist +/key1=real:12.34 +/key2='"Hello world!"' -ej -w # writes "new.clist"
.sp
	codalist +/='{key1:12.34,key2:"Hello world!",key3:[[]]}' # or use JSON5 strings.
.sp
JSON allows a dictionary to contain null objects, which is kind of odd and not supported all formats.
.sp
	codalist +/='{key1:null,key2:[null]}' -t # test formats for this
.sp
Testing    Apple XML: class[Void] is not a supported leaf type.
.sp 0
Testing Apple Binary: *** OK ***
.sp 0
Testing         JSON: *** OK ***
.sp
Note:  Most JSON strings should be single quoted in the shell to prevent alterations/confusion.
/paths/are/used to access existing items where array must be indexed with an integer or "+" while adding an item.  Oddly because mosts options to programs start with "-" below "+pretty" turns off JSON Pretty mode.
.sp
	codalist +/='[[]]' +/0/+=99 +/+=88 -ej +pretty -w:- # ok pretty mode was already off...
.sp
	Produces: [[99],88]    # "-" for an output file goes to <stdout>
.sp
The default is that at the end of processing, if the file was not written, you get a terse report of the contents.
.sp
	codalist +/='[[]]' +/0/+=99 +/+=88  ## Displays:
.sp 0
<array[1]>
.sp 0
	99
.sp 0
88
.sp
Dates are highly formatted.
.sp
	codalist +/=date:1971-01-01T00:00:00Z -t # is ok.
.sp 0
	codalist +/=date:1971-88-01T00:00:00Z -t # is not.
.sp
	codalist +/=data:SGVsbG8K -w:- # will write the raw data for single data leaf.
.sp 0
	Produces: "Hello\\n"
.sp
Items from the current plist may be copied.
.sp
	codalist +/='{a:1,b:2,c:3}' +/d=:/b # will copy dict key "b" to new key "d"
.sp
Items from plist files may also be copied.
.sp
	codalist +/='{color:green,size:42,"haveit":true}' -w:new.clist # write a temp file
.sp 0
	codalist +/='{color:blue,haveit:false}' +/size=./new.clist:/size -ej -w:-
.sp 0
	Produces: {"color":"blue","haveit":false,"size":42}
.sp
Or we might want to delete something.
.sp
	codalist +/='{color:blue,haveit:false,size:12}' -/haveit -ej -w:-
.sp 0
	{"color":"blue","size":12}
.sp
In order to add a null value to a dictionary, use "jsonnull".  Note:  Arrays will accept actual "null".
.sp
	codalist +/Name=jsonnull -ej -w:- # -> {"Name":null}
.sp
	codalist +/Name=null -ej -w:- # -> {}
.sp
And naturally we can print XML.
.sp
	codalist +/='{a:1,b:2.3,c:"Grape"}' -ea -w:-
.sp
<?xml version="1.0" encoding="UTF-8"?>
.sp 0
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
.sp 0
<plist version="1.0">
.sp 0
<dict>
.sp 0
	<key>a</key><integer>1</integer>
.sp 0
	<key>b</key><real>2.2999999999999998e+00</real>
.sp 0
	<key>c</key><string>Grape</string>
.sp 0
</dict>
.sp 0
</plist>
.sp
.Sh COPYRIGHT
Copyright (c) 2024  Stephen M. Jones, Affero GPL 3.
